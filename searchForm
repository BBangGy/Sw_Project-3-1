class App extends React.Component {
constructor(){
    super();
    this.state={
        searchKeyword: "",
    }
}
handleChangeInput(event){
    const searchKeyword = event.target.value;
    if(searchKeyword.length<=0){
        return this.handleReset();
    }
    this.setState({
        searchKeyword
    });

    
}
handleSubmit(event){
    event.preventDefault();
    console.log("TOdo: handleSubmit",this.state.searchKeyword);
}
handleReset(){
    
    //this.setState({searchKeyword:" "});
    //setstate는 항상 비동기로 작동한다. 그래서 입력된 문자열이 항상 남아있다.
    //x버튼을 누르면 검색창에 입력된것도 사라져야하기 때문에 setState로 searhkeyword를 빈 문자열로 바꿔준다.
    this.setState(()=>{//함수값을 전달해줄수도 있다.
        //여기서 변경된 상태를 반환해주면된다.()
        return{searchKeyword:""}
    },()=>{
        //여기서는 state변경이 완료되면 호출되는 함수
        console.log("Todo: handleReset",this.state.searchKeyword);
    })
    
}
render() {
    return (
      <>
        <header>
          <h2 className="container">검색</h2>
        </header>
        <div className="container">

          <form 
            onSubmit={event=>this.handleSubmit(event)}
            onReset = {()=>this.handleReset()}
          >
            <input type="text" 
            placeholder="검색어를 입력하세요" 
            autoFocus 
            value={this.state.searchKeyword}
            onChange={event => this.handleChangeInput(event) }
            //event객체가 들어올것이고, event가 들어오면 handleChangeInput이라는 메소드로 전달한다.
            />
            {this.state.searchKeyword.length>0 &&(<button type="reset" className="btn-reset"></button>)}
          </form>
        </div>
      </>
    );
  }
}

ReactDOM.render(<App />, document.querySelector("#app"));
